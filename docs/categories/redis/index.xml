<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Kenny(@Blockhack)</title>
    <link>/categories/redis/</link>
    <description>Recent content in Redis on Kenny(@Blockhack)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>k@m.fish (Kenny)</managingEditor>
    <webMaster>k@m.fish (Kenny)</webMaster>
    <copyright>&amp;copy; Copyright 2017-2018 Kenny</copyright>
    <lastBuildDate>Thu, 01 Feb 2018 10:47:19 +0800</lastBuildDate>
    
	<atom:link href="/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis基础</title>
      <link>/posts/redis/basis/</link>
      <pubDate>Thu, 01 Feb 2018 10:47:19 +0800</pubDate>
      <author>k@m.fish (Kenny)</author>
      <guid>/posts/redis/basis/</guid>
      <description> Redis经常在业务中被重度使用，但很多开发者只会简单的get、set、del，而不去进一步研究Redis的原理和最佳实践，导致埋下了很多坑。本文持续更新在使用Redis过程中积累的知识点。
基本概念  线程安全：Redis的主要功能都基于单线程模型实现，其所有操作都是原子的，不会因并发产生数据异常； 非阻塞式IO，大部分命令的算法时间复杂度都是O(1)，且数据都在内存中，因此读写性能很高；  数据结构 Redis支持的数据结构：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(有序集合)、bitmaps(位图)、Hyperloglogs、GEO(地理信息定位)。
String String是最基础的数据结构，只应用String数据结构来存储的Redis类似Memcached。
String是Redis的基础数据类型，其他所有数据类型在Redis中都体现为String。比如操作整形的方法：INCR/INCRBY/DECR/DECRBY，可以操作保存为String的int64，而且由于Redis线程安全的特性，以上操作可以非常便利的实现高并发场景下的精确控制。应用场景如：秒杀、计数器、发号器等。
Hash 使用Hash替代String来控制key的数量可以大幅降低内存，
List List是一个双向链表，典型的应用场景如消息队列。如果单纯想用作数组，则不建议使用List结构，虽然Redis提供的方法可以实现基本的数组操作，但如LINDEX/LSET/LINSERT等方法时间复杂度为O(N)，谨慎使用。
List还提供了一系列阻塞方法来更方便的实现消息队列，如BLPOP/BRPOP等，即在List为空时阻塞该连接，直到有对象可以POP时再返回。具体说明请参考官方文档。
规范  避免使用计算复杂度高的命令：使用高耗时的Redis命令是很危险的，会占用唯一的一个线程的大量处理时间，导致所有的请求都被拖慢（例如时间复杂度为O(N)的KEYS命令，应避免在生产环境中使用）； key应在充分表达含义的基础上控制长度：虽然redis允许key最长512MB，但长度过长的key不仅占用内存，而且在检索的时候更加耗费资源。如果必须要使用一个很长的key值，建议对其进行hash（sha1/md5）处理，这样更节省内容和网络开销。长度过短的key虽然更节省内存，但牺牲了可读性； key命名按照统一的格式规范：例如，object:id:action； 存储二进制数据：把数据序列化成二进制数据存储，读取的时候再进行反序列化处理，要选择一种高效的序列化/反序列化方法，否则也会造成不必要的开销； 存储JSON：除了二进制数据，通常还会使用JSON字符串存储，为了节省内存，可以选择将其压缩后再存储；  常见使用场景  缓存 排行榜 计数器 社交网络 消息队列  参考文章  Redis开发与运维 An introduction to Redis data types and abstractions 5 Key Takeaways for Developing with Redis 缓存那些事 Redis基础、高级特性与性能调优  </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kenny</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Kenny</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>k@m.fish (Kenny)</managingEditor>
    <webMaster>k@m.fish (Kenny)</webMaster>
    <copyright>&amp;copy; Copyright 2017-2018 Kenny</copyright>
    <lastBuildDate>Mon, 08 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言构建Socket应用(未完)</title>
      <link>/posts/go/socket/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <author>k@m.fish (Kenny)</author>
      <guid>/posts/go/socket/</guid>
      <description>本文主要介绍如何用Go语言来构建Socket应用。
Go语言实现Socket其实很容易，net包中对网络协议的封装已经非常完善，直接利用即可。当我们谈到Socket的时候，一般场景指的是服务端和客户端的&amp;rdquo;双向通信&amp;rdquo;，而通信就需要建立连接通道。Go语言中这个“通道”可以用net包中的类型Conn来表示，而TCPConn和UDPConn为Conn对应于TCP和UDP协议的实现。本文仅以TCP为例来介绍Go语言的Socket实现（UDP实现差异不大）。
Simple Server 我们使用 TCPConn 在客户端和服务器端来读写数据以及管理连接，主要用到Read、Write、Close这三个方法：
func (c *TCPConn) Read(b []byte) (int, error) func (c *TCPConn) Write(b []byte) (int, error) func (c *TCPConn) Close() error ###  下面我们先来创建一个服务端，使用net包中的ListenTCP方法来建立一个TCP网络监听：
func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error)  此方法接收两个参数，network为TCP网络名字符串，TCPAddr为TCP的地址信息，返回一个TCPListener即TCP网络监听。TCPAddr可以通过ResolveTCPAddr方法来构造：
func ResolveTCPAddr(network, address string) (*TCPAddr, error)  服务端代码server/main.go如下：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; ) func main() { tcpAddr, _ := net.ResolveTCPAddr(&amp;quot;tcp4&amp;quot;, &amp;quot;:9000&amp;quot;) listener, err := net.ListenTCP(&amp;quot;tcp&amp;quot;, tcpAddr) checkError(err) for { conn, err := listener.</description>
    </item>
    
    <item>
      <title>Dockerfile入门：用Dockerfile创建CentOS&#43;Nginx - Docker实践教程(2)</title>
      <link>/posts/docker/helloworld_2/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      <author>k@m.fish (Kenny)</author>
      <guid>/posts/docker/helloworld_2/</guid>
      <description>上一篇文章 讲了docker的hello world以及常用的几个docker命令，这篇中我们来创建image。
Dockerfile 首先创建一个 Dockerfile 并进入编辑模式：
$ cd /path/to/some/folder $ touch Dockerfile $ vi Dockerfile  编辑文件内容如下：
FROM centos:latest MAINTAINER Kenny Yao &amp;lt;k@m.fish&amp;gt; ADD nginx.repo /etc/yum.repos.d/nginx.repo RUN yum install -y nginx RUN yum clean all RUN echo &amp;quot;daemon off;&amp;quot; &amp;gt;&amp;gt; /etc/nginx/nginx.conf EXPOSE 80 CMD [&amp;quot;nginx&amp;quot;]  FROM：Dockerfile文件都是以 FROM 开头的，指定此镜像以哪个基础镜像创建，我们以 centos 的最新版本 latest 建立此镜像。MAINTAINER 为该镜像的维护者的信息。 RUN：在创建镜像时运行命令； ADD：向镜像中添加本地文件； EXPOSE：指定容器在运行时监听的端口。 daemon off;：该指令告诉nginx在前台运行，更多说明参照：nginx.org，以及这条Stackoverflow问题：What is the difference between nginx daemon on/off option?，如果不在nginx.conf中加这行，也可以在CMD命令中这样写：
CMD [&amp;quot;nginx&amp;quot;,&amp;quot;-g&amp;quot;,&amp;quot;daemon off;&amp;quot;]  CMD：提供了容器默认的执行命令。</description>
    </item>
    
    <item>
      <title>Docker入门 - Docker实践教程(1)</title>
      <link>/posts/docker/helloworld_1/</link>
      <pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate>
      <author>k@m.fish (Kenny)</author>
      <guid>/posts/docker/helloworld_1/</guid>
      <description>接触docker有一段时间了，但之前的使用仅限于使用别人的镜像搭建shadowsocks和pptp，并没有深入研究。最近开始研究docker，先从搭建公司产品的开发环境入手，期望能探索一下docker在生产/测试环境中的最佳实践，提升公司研发团队的研发体验。所以有了这个系列文章。 Docker在各种环境的安装指南：Docker Installation Mac用户请安装官方提供的：Docker Toolbox 貌似也可以安装（并没有用过）：Boot2docker
Hello World 安装完成之后，可以输入下面的命令来查看Docker的信息：
$ docker info  或仅查看docker的版本信息：
$ docker version  获得docker命令帮助：
$ docker --help  获得特定命令帮助（以run命令为例）：
$ docker run --help  下面我们启动一个centos来输出我们的docker hello world：
$ docker run centos /bin/echo &#39;Hello world&#39;  docker run 命令来运行一个容器（container），centos 是我们这次容器里面运行的镜像（image）。当你指定运行一个镜像的时候，docker首先会查找你本地的docker环境是否已存在该镜像，如果不存在，则会去 Docker Hub 拉取（pull）这个镜像的最新版本。或者你可以选择在run某个镜像之前，手动运行 docker pull some/image 来下载某个镜像到本地docker环境。已经pull到本地的镜像可以通过 docker images 命令来查看。 /bin/echo &amp;lsquo;Hello world&amp;rsquo; 是我们在容器中运行的命令。如果想在运行centos之后进入命令行，可以使用以下命令：
$ docker run -t -i centos /bin/bash  -t 命令让docker分配一个伪终端（pseudo-TTY）给当前容器 -i 命令让容器持续接收用户输入 /bin/bash 大家都懂这是干嘛的 更多docker run命令的参数请参看：docker run，后面也会介绍其他几个用到的参数。</description>
    </item>
    
  </channel>
</rss>